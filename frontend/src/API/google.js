// Google AI Integration - Vers√£o Corrigida
// Arquivo: src/API/google.js

/**
 * Configura√ß√£o do cliente Google GenAI para Gemini
 * Documenta√ß√£o: https://ai.google.dev/docs
 */

// Importe a biblioteca necess√°ria para a API do Google
// Nota: Voc√™ precisar√° instalar a biblioteca com: npm install @google/generative-ai
import { GoogleGenerativeAI } from "@google/generative-ai";

// Inicialize o cliente Google GenAI com sua chave de API
// IMPORTANTE: Esta √© a chave API do Google AI Studio (n√£o confundir com outras chaves do Google Cloud)
const API_KEY = "AIzaSyALaC2wenJQ8MCwEBMO7H3dkkh2wuHtBVM"; // üëà Substitua por sua chave API

// Inicialize o cliente Google GenAI
const genAI = new GoogleGenerativeAI(API_KEY);

// Modelo a ser utilizado
const MODEL_NAME = "gemini-2.0-flash"; // Modelo mais r√°pido dispon√≠vel atualmente

/**
 * Fun√ß√£o para obter uma sugest√£o de h√°bito do Google Gemini com base em dados do usu√°rio
 * @param {string} nome - Nome do usu√°rio
 * @param {string} cidade - Cidade onde o usu√°rio mora
 * @param {string} estadoEmocional - Como o usu√°rio est√° se sentindo
 * @param {string} clima - Condi√ß√£o clim√°tica atual
 * @returns {Promise<string>} - Sugest√£o de h√°bito
 */
export const getSugestaoHabito = async (nome, cidade, estadoEmocional, clima) => {
  try {
    // Obter o modelo
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    
    // Construindo o prompt completo com instru√ß√µes do sistema incorporadas no prompt
    const mensagem = `
    Como um assistente especializado em bem-estar e desenvolvimento de h√°bitos saud√°veis, me d√™ UMA sugest√£o de h√°bito saud√°vel.
    
    Meu nome √© ${nome}, moro em ${cidade}, estou me sentindo ${estadoEmocional} e o clima est√° ${clima}.
    
    A sugest√£o deve ser curta, espec√≠fica e motivacional.
    `;
   
    // Configura√ß√£o da gera√ß√£o
    const generationConfig = {
      temperature: 0.7,
      maxOutputTokens: 150,
    };
    
    // Fazendo a requisi√ß√£o direta para o modelo Gemini (sem usar chat)
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: mensagem }] }],
      generationConfig,
    });
    
    // Extraindo a resposta do modelo
    return result.response.text();
    
  } catch (error) {
    console.error('Erro ao obter sugest√£o de h√°bito:', error);
    throw new Error('N√£o foi poss√≠vel obter uma sugest√£o neste momento. Tente novamente mais tarde.');
  }
};

/**
 * Fun√ß√£o para analisar o sentimento com base na descri√ß√£o do usu√°rio
 * @param {string} descricao - Texto inserido pelo usu√°rio descrevendo seu dia
 * @returns {Promise<Object>} - An√°lise de sentimento
 */
export const analisarSentimento = async (descricao) => {
  try {
    // Obter o modelo
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });
    
    // Configura√ß√£o do prompt para an√°lise de sentimento
    const promptAnalise = `
    Analise o seguinte texto e retorne um objeto JSON com as propriedades: 
    - sentimento (positivo, neutro, negativo)
    - estadoEmocional (uma palavra que descreva a emo√ß√£o predominante)
    
    Texto para an√°lise: "${descricao}"
    
    Retorne apenas o objeto JSON sem explica√ß√µes adicionais.
    `;
    
    // Configura√ß√£o da gera√ß√£o
    const generationConfig = {
      temperature: 0.3,
      maxOutputTokens: 100,
    };
    
    // Fazendo a requisi√ß√£o para o modelo Gemini
    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: promptAnalise }] }],
      generationConfig,
    });
    
    // Extrair resposta e converter para objeto
    const textoResposta = result.response.text();
    
    // Tentar extrair apenas o JSON se houver texto adicional
    let jsonString = textoResposta;
    if (textoResposta.includes('{') && textoResposta.includes('}')) {
      jsonString = textoResposta.substring(
        textoResposta.indexOf('{'),
        textoResposta.lastIndexOf('}') + 1
      );
    }
    
    return JSON.parse(jsonString);
    
  } catch (error) {
    console.error('Erro ao analisar sentimento:', error);
    return { sentimento: 'neutro', estadoEmocional: 'indeterminado' };
  }
};